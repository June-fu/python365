#!/usr/bin/python
# -*- coding: UTF-8 -*-

# Author: june-fu
# Date  : 2020/2/12
"""
Problem 32: Write a function mutate to compute all words generated by a single mutation on a given word.
A mutation is defined as inserting a character, deleting a character, replacing a character,
or swapping 2 consecutive characters in a string. For simplicity consider only letters from a to z.

>>> words = mutate('hello')
>>> 'helo' in words
True
>>> 'cello' in words
True
>>> 'helol' in words
True
"""


# http://norvig.com/spell-correct.html
def mutate(word):
    letters = 'abcdefghijklmnopqrstuvwxyz'
    splits = [(word[:i], word[i:]) for i in range(len(word)+1)]
    deletes = [L+R[1:] for L, R in splits]
    inserts = [L+C+R for L, R in splits for C in letters]
    replaces = [L+C+R[1:] for L, R in splits for C in letters]
    swaps = [L[:len(L)-1]+R[:1]+L[-1]+R[1:] for L, R in splits if len(L) > 0]
    # swaps = [L+R[1]+R[0]+R[2:]  for L, R in splits if len(R) > 1]
    return set(deletes + swaps + replaces + inserts)


# use only one List Comprehensions  to complete
def mutate2(word):
    return [w for i in range(len(word) + 1) for j in range(1, len(word)) for C in 'abcdefghijklmnopqrstuvwxyz' for w in [
        word[:i] + word[i+1:],  # deletes
        word[:i] + C + word[i:],  # inserts
        word[:i] + C + word[i + 1:],  # replaces
        word[:j-1] + word[j] + word[j-1] + word[j+1:]  # swaps
    ]]


if __name__ == '__main__':
    words = mutate2('hello')
    print(words)
    print('helo' in words)
    print('cello' in words)
    print('helol' in words)